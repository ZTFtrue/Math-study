#注释
#  每一行都是一个节点，双空格表示换行，缩进表示节点父子关系。
#  没有任何字符的空行不会做任何处理。
#  “\#\#\#” 是头部和主体部分的分割符。
#  下面是配置。
left_and_right
# 图的高度
svg-height:7000
svg-width:2000
node-width:100
node-height:180
node-circle-radius:6
font-size:24
indentation-size:2
###
Math
  平面图形
    直线与方程
    点直线平面之间的位置关系
    圆与方程
    直线与圆
    椭圆
    圆锥曲线
    解三角形
    参数方程
    渐开线与摆线
  复数
    实数
      素数
      最大公因子
    虚数
    @ 虚数是指实数以外的复数，其中实部为0的虚数称为纯虚数。而英文imaginary number的另一种定义是可以写作实数与虚数单位$i$乘积的数，以此定义，0可视为同时是实数也是虚数.
    @ 虚数可对应平面上的纵轴，与对应平面上横轴的实数同样真实。虚数轴和实数轴构成的平面称复数平面，复数平面上每一点对应着一个复数（参考向量）。
    @ 不同的虚数都是不能比较大小的，虚数或者说虚部不为0的复数不能比较大小。
    @ $\sqrt{-1}$实际上代表的是两个数，分别为 ${ +i} $及 ${ -i}$,直接将 $\sqrt {-1}$对应到 ${ +i}$，而 ${ -{\sqrt {-1}}} 对应到 { -i}$ 也是可以的，也可以认为$i^2=-1$。
      四元数(需先了解矩阵)
      八元数
      十六元数
  数学运算
    幂运算(指数运算)
      @ $n^m$ n为底数，m为指数。n的m次幂、n的m次方
      @ $0^0$ 没有正式的定义，部分惯例为1
      @ 幂不符合结合律和交换律
      @ $a^0=1$
      @ $n^{a}\cdot n^{b}=n^{(a+b)}$
      @ $n^{a}\div n^{b}=n^{(a-b)}$
      @ $(a^m)^n=a^ { m\cdot n} $
      @ $a^{n}\cdot b^{n}=(a\cdot b)^{n}$
      @ $a^{n}\div b^{n}=(a\div b)^{n}$
      @ $a^0 =1=a^{1-1}=\frac{a^{1}}{a^{1}}$
      @ $a^{(-k)}=\frac{1}{a^{k}}=a^{(0-k)}=\frac{a^{0}}{a^{k}}=\frac{1}{a^{k}}$
      @ $a^{\frac{m}{n}}=\sqrt[n]{a^{m}}(n\neq 0)$
    对数(幂运算的逆运算)
      @ 如果 $a=n^{b}$，则有$b=\log _{n}a$, 其中n是对数的底(也称为基数),b是(对于底数n)a的对数.底数n的值一定不能是1或0（在复数的复对数情况下不能是1的方根）
      @ 自然对数以$e=2.178$为底,$lnx$ . $\lim_{n\to\infty} \left(1+\frac{1}{n}\right)^n$ 参看极限.
      @ $\log_{a}(1)=0$
      @ $\log_{a}(a)=1$
      @ $\log_{a}(M \cdot N)=\log_{a}M + \log_{a}N)$
      @ $\log_{a}(M/N)=\log_{a}M - \log_{a}N)$
      @ $\log_{a}(m^{n})=n\log_{a}m$
      @ $\log_{(a^{n})}M=\frac{1}{n}\log_{a}M$
      @ 还原 $n^{\log_{n}b}=b=\log_{n}n^{b}$
      @ 基变换(换底公式) $\log_\alpha x=\frac{\log_\beta x}{\log_\beta \alpha}$
      @ 指系(次方公式) ${ \log _{\alpha ^{n}}x^{m}={\frac {m}{n}}\log _{\alpha }x}$
      @ 互换	$M^{\log _{\alpha } N}=N^{\log _{\alpha } M}$
      @ 倒数 $\log_{\alpha}\theta=\frac{\ln\theta}{\ln\alpha}=\dfrac{1}{\dfrac{\ln\alpha}{\ln\theta}}=\frac{1}{\log_{\theta}\alpha}$
      @ 链式 ${\displaystyle {\begin{aligned}\log _{\gamma }\beta \log _{\beta }\alpha &={\frac {\ln \alpha }{\ln \beta }}\ {\frac {\ln \beta }{\ln \gamma }}={\frac {\ln \alpha }{\ln \gamma }}=\log _{\gamma }\alpha \end{aligned}}}$
    阶乘
      @ 在数学中，正整数的阶乘（英语：factorial）是所有小于及等于该数的正整数的积，计为n!，例如5的阶乘计为5!，其值为120：$${\displaystyle 5!=5\times 4\times 3\times 2\times 1=120 .}$$并定义，1的阶乘1!为1、0的阶乘0!亦为1，其中，0的阶乘表示一个[空积](https://zh.wikipedia.org/wiki/%E7%A9%BA%E7%A7%AF)
    逆元
      加法逆元
        @ 设“+”为一个交换性的二元运算，即对于所有x,y，x+y=y+x。若该集内存在一个元素0，使得对于所有x，x+0=0+x=x，则此元素是唯一的。如果对于一个给定的x，存在一个x'使得x+x'=x'+x=0，则称x'是x的加法逆元。
        @ 对于一个任意数n，存在加法逆元（英语：Additive Inverse，又称相反数），其与n的和为零（加法单位元）。n的加法逆元表示为-n。
      乘法逆元(倒数)
        @数学上，一个数 ${\displaystyle \displaystyle x} \displaystyle x的倒数（reciprocal），或称乘法逆元（multiplicative inverse），是指一个与 {\displaystyle \displaystyle x} \displaystyle x相乘的积为1的数，记为 {\displaystyle \displaystyle {\tfrac {1}{x}}} \displaystyle \tfrac{1}{x}或 {\displaystyle \displaystyle x^{-1}} \displaystyle x^{-1}$。  在抽象代数中，倒数所对应的抽象化概念是乘法群的某个元素的“乘法逆”，也就是相对于群中“乘法”运算的逆元素。注意这个名词只当相应的群中的运算被称为“乘法”后才使用。如果群中的运算被称为“加法”，那么同样的概念称为“加法逆”。乘法逆的具体定义可以参见群的逆元素概念。
        负倒数
        @ 乘积为-1的两个实数互为负倒数，实数x的负倒数记为 ${\displaystyle -{\frac {1}{x}}} {\displaystyle -{\frac {1}{x}}}或 {\displaystyle -x^{-1}} {\displaystyle -x^{-1}}$。一个实数的倒数和其负倒数是相反数，0没有倒数或负倒数。
    二项式定理
    @$(x+y)^{n}={n \choose 0}x^{n}y^{0}+{n \choose 1}x^{{n-1}}y^{1}+{n \choose 2}x^{{n-2}}y^{2}+\cdots +{n \choose n-1}x^{1}y^{{n-1}}+{n \choose n}x^{0}y^{n}$,其中每个 ${n \choose k}$ 为一个称作二项式系数的特定正整数，其等于 ${\frac {n!}{k!(n-k)!}}$。这个公式也称二项式公式或二项恒等式。使用求和符号，可以把它写作$(x+y)^{n}=\sum _{k=0}^{n}{n \choose k}x^{n-k}y^{k}=\sum _{k=0}^{n}{n \choose k}x^{k}y^{n-k}$.
    @ 后面的表达式只是将根据 x 与 y 的对称性得出的，通过比较发现公式中的二项式系数也是对称的。 二项式定理的一个变形是用 1 来代换 y 得到的，所以它只涉及一个变量。在这种形式中，公式写作$(1+x)^{n}={n \choose 0}x^{0}+{n \choose 1}x^{1}+{n \choose 2}x^{2}+\cdots +{n \choose {n-1}}x^{n-1}+{n \choose n}x^{n}$,或者等价地$(1+x)^{n}=\sum _{k=0}^{n}{n \choose k}x^{k}$.
    二项式系数(二项式定理中各项的系数,参考杨辉三角)
    贝塞尔曲线
    @${\mathbf {B}}(t)=\sum _{{i=0}}^{n}{n \choose i}{\mathbf {P}}_{i}(1-t)^{{n-i}}t^{i}={n \choose 0}{\mathbf {P}}_{0}(1-t)^{n}t^{{0}}+{n \choose 1}{\mathbf {P}}_{1}(1-t)^{{n-1}}t^{{1}}+\cdots +{n \choose n-1}{\mathbf {P}}_{{n-1}}(1-t)^{{1}}t^{{n-1}}+{n \choose n}{\mathbf {P}}_{n}(1-t)^{{0}}t^{n}{\mbox{ , }}t\in [0,1]$
    杨辉三角形(帕斯卡三角形、贾宪三角形、海亚姆三角形、巴斯卡三角形)
    @ 1. 杨辉三角以正整数构成，数字左右对称，每行由1开始逐渐变大，然后变小，回到1。
    @ 2. 杨辉三角每一行的平方和在杨辉三角出现奇数次。
    @ 3. 杨辉三角第2的幂行所有数都是奇数。
    @ 4. 杨辉三角每一行的和是2的幂。
    @ 5. 第 n 行的数字个数为n个。
    @ 6. 第 n 行的第k个数字为组合数$C_{n-1}^{k-1}$。
    @ 7. 第n行数字和为$2^{n-1}$。
    @ 8. 除每行最左侧与最右侧的数字以外，每个数字等于它的左上方与右上方两个数字之和（也就是说，第 n 行第k 个数字等于第 n-1 行的k-1 个数字与第 k 个数字的和）。这是因为有组合恒等式：$C_{n+1}^{i+1}=C_{n}^{i}+C_{n}^{i+1}$。可用此性质写出整个杨辉三角形。
    @![杨辉三角形图解](https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif)  (图片来自维基百科)
    丢番图方程(不定方程)
  数列
    等差数列
    等比数列
    斐波那契数列
      @ 斐波那契数列由0和1开始，之后的斐波那契系数就是由之前的两数相加而得出。首几个斐波那契系数是：
      @ $0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...... $
      @ 递归定义:
      @ $F_0=0$
      @ $f_1=1$
      @ $F_n=F_{n-1}+F_{n-2}(n ≧ 2)$
      @ __0不是第一项，而是第零项。__
      @ 斐波纳契数也是帕斯卡三角形的每一条红色对角线上数字的和。[参考wikipedia](https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97)
      斐波那契螺旋线
  空间曲面
    空间直角坐标系  过空间某定点O(原点)作三条互相垂直的数轴(它们都以O为原点，通常取相同的长度单位), 分别称为x轴、y轴和z轴。每两轴组成的面称为坐标平面(xOy,yOz,xOz)，三个坐标平面把空间分成八个部分，称为八个挂限。空间两点P(x1,y1,z1)，P2距离:|P1P2|=（x1-x2)^2+()+()
    空间曲面方程  一个包含x,y,z的方程F(x,y,z)=0 则表示空间的一个曲面，也可用z=f(x,y);
    常见空间曲面
      球面  到定点M0(x0,)的距离等于定长R(R>0)的动点的轨迹称为球面，M0 称为球心,R为半径。设M为球面上的任意一点，则|MM0|^2=R^2,于是以M0为球心，R为半径的球面方程为（x ，如果球心在原点x^2+y^2+z^2=R^2;
      柱面  设c是坐标平面内的一条曲线，l为垂直与该平面的一条直线，将l沿着平面曲线c，平行滑动形成的轨迹称为柱面；平面曲线c称为柱面的准线，动直线l称为柱面的母线。
      旋转曲面  平面曲线c绕着同一平面内的一条定直线l旋转而形成的曲面称为旋转曲面，曲线c称为母线，定直线l称为旋转轴。
        旋转单叶双曲面
        旋转双叶双曲面  由双曲线f(x)=1绕z轴旋转而形成的旋转曲面方程
        双叶双曲面
    球坐标系
    直线平面简单几何体
    空间几何体

  集合
    @ 基本的数学概念，它是集合论的研究对象，指具有某种特定性质的事物的总体，（在最原始的集合论─朴素集合论─中的定义，集合就是“一堆东西”。）
    @ 集合里的事物（“东西”），叫作元素。$x$是集合$A$的元素，记作 $x\in A$。
    @ 简单来说，所谓的一个集合，就是将数个对象归类而分成为一个或数个形态各异的大小整体。 一般来讲，集合是具有某种特性的事物的整体，或是一些确认对象的汇集。构成集合的事物或对象称作元素或是成员。集合的元素可以是任何事物，可以是人，可以是物，也可以是字母或数字等。在数学交流当中为了方便，集合会有一些别名。比如：族、系　通常指它的元素也是一些集合。
    符号
      元素  通常用 ${\displaystyle a,\ b,\ c,\ d,\ x} $等小写字母来表示；
      集合  通常用 ${\displaystyle \mathbf {A,\ B,\ C,\ D,\ X} }$等大写字母来表示。当元素 ${\displaystyle a}$ 属于集合 ${\displaystyle \mathbf {A} }$ 时，记作 ${\displaystyle a\in \mathbf {A} } $。当元素 ${\displaystyle a} $不属于集合 ${\displaystyle \mathbf {A} } $时，记作 ${\displaystyle a\not \in \mathbf {A} } $。如果 ${\displaystyle \mathbf {A,\ B} }$ 两个集合所包含的元素完全一样，则二者相等，写作 ${\displaystyle \mathbf {A=B} }$。
    集合的特性
      无序性  一个集合中，每个元素的地位都是相同的，元素之间是无序的。集合上可以定义序关系，定义了序关系后，元素之间就可以按照序关系排序。但就集合本身的特性而言，元素之间没有必然的序
      互异性  一个集合中，任何两个元素都认为是不相同的，即每个元素只能出现一次。有时需要对同一元素出现多次的情形进行刻画，可以使用多重集，其中的元素允许出现多次。
      确定性  给定一个集合，任给一个元素，该元素或者属于或者不属于该集合，二者必居其一，不允许有模棱两可的情况出现。
    集合的表示
      用文字或数学符号描述
      在大括号中列出其元素，称为列举法
    集合间的关系
    集合的运算
  函数
    映射
    一元函数  设D为一非空实数集合，如果对应法则f，使任意实数 ${x \in D}$ , 都有唯一的实数y与之对应，则简称y是x的函数，记为y=f(x).称x为自变量，y为因变量，非空实数集D称为定义域，简记为D(f),集合{y|y=f(x),x∈D}称为函数的值域，记为Z(f).有于该函数仅包含一个自变量，所以我们也称之为一元函数。
      函数的表示方法  表达式法，列表法，图形法。
      分段函数  在定义域内不同的区间上用不同的解析表达式表示
        单位阶跃函数
    反函数(定义域与值域反过来,域的值不重复)  设函数y=f(x)的定义域为D(f),值域为Z(f),惹对于任意y∈Z(f)，存在唯一的满足y=f(x)的x∈D(f)与之对应，这种对应关系确定了x是y的函数，称之为y=f(x)的反函数，记为x=f-1(y);
    基本初等函数
      幂函数  $y=x^a$
      指数函数  $y=a^x(a>0,a!=1)$
      对数函数  $y=log_a^x$
      三角函数
        @ 余切$\cot x =\frac{1}{\tan x}$
        @ $\csc x =\frac{1}{\sin x}$
        三角恒等变换
        任意角的三角函数
        弧度制
        正弦于弦的诱公式
        同三角函数的基本关系式
        三角函数的图像性质
      反三角函数
    复合函数
    多元函数
    隐函数
  极限
    数列的极限(描述性定义)  对于数列  $$\{a_n\}$$ ，当n无线增大时，如果 $$\{a_n\}$$  无限接近于一个确定的常数A，那么称A是数列  $$\{a_n\}$$  的极限，或者称数列  $$\{a_n\}$$  收敛于A。记为  $$lim(n→∞)\{a_n\} =A $$, 或者 $$ a_n → A（n→∞) $$, 如果 $$ \{a_n\} $$ 没有极限,则称数列 $$ \{a_n\} $$ 发散。      1. 如果数列有极限，则数列的极限是唯一的。      2. 一般地，任一常数数列的极限是常数本身，$$ lim(n→∞)C=C $$。
    函数的极限
      x与无穷大的关系
        @ 当自变量x取正值且无限增大(记为x→+∞)时  函数值f(x)无限接近于一个确定常数A，那么A称为函数f(x)当$$x→+∞$$时的极限，记为$$lim(x→∞)f(x) =A $$或 $$ f(x) → A（x→∞) $$.
        @ 当x取负值且|x|无限增大(记为 x→-∞)时  函数值f(x)无限接近于一个确定常数A，那么A称为函数f(x)当$$x→-∞$$时的极限，记为$$lim(x→-∞)f(x) =A $$或 $$ f(x) → A（x→-∞) $$.
        @ |x|→∞记为 x→∞  . $$ x→∞ $$ 时，相应的函数值f(x)无限接近于一个确定常数A，那么A称为函数f(x)当$$ x→∞ $$时的极限，记为记为$$lim(x→∞)f(x) =A $$或 $$ f(x) → A（x→∞) $$. 函数$$y=(x+1)/x$$的x 无限增大极限为1，而$$ y=(1/2)^x $$ 不存在。
        @ 当且仅当$$lim(x→+∞)f(x)$$ 和 $$ lim(x→-∞)f(x) $$ 都存在且相等，则 $$lim(x→∞)f(x)$$ 存在，即$$lim(x→∞)f(x) = A <=> lim(x→+∞)f(x) = lim(x→-∞)f(x)= A $$
      当$$ x→x_0 $$
      左极限(右极限)  数f(x)在$$x_0$$ 处的极限存在的充分必要条件是f(x) 在$$x_0$$ 处的左右极限都存在且相等。
      无穷大(比较绝对值)
      无穷小(以0为极限)
        有限个无穷小量的代数和仍然是无穷小量
        无穷小量与有界量的乘积仍然是无穷小量
      无穷大与无穷小的关系  若$$limf(x)=∞$$ ,则$$lim{1/f(x)}=0$$;反之，若$$limf(x)=0$$ ,且$$f(x)≠0$$，则$$lim{1/f(x)}=∞$$
      极限的四则运算
        @ 在自变量x的同一变化过程中，设$$limf(x)=A$$，$$limg(x)=B$$，则
        @ $$lim[f(x)±g(x)]=limf(x)±g(x)=A±B$$
        @ $$lim[f(x)g(x)]=limf(x)limg(x)=AB$$
        @ 若B≠0,则$$lim{f(x)/g(x)}={limf(x)}/{limg(x)}=A/B$$
        @ $$lim[Cf(x)]=Climf(x)$$ (C为常数)
        @ 若$$limf(x)$$存在，则$$lim[f(x)]^n=[limf(x)]^n$$(n为有限数)
        @ $$lim{x→x_0}{x^n}={x_0}^n$$
      复合函数的极限运算法则
      两个重要极限
      函数的连续性
    无穷大与无穷小
  导数与微分
    什么是导数  设函数y=f(x)在点$$x_0$$ 及其附近有定义，当自变量由$$x_0$$变化到$$x_0+Δx(Δx≠0)$$时，相应的函数增量为$$Δy=f(x_0+Δx)-f(x_0)$$. 如果当$$Δx→0$$时，极限$$lim(Δx→0) {Δy/Δx}=lim(Δx→0) {{f(x_0+Δx-f(x_0)}/Δx}$$存在，则称函数f(x)在点$$x_0$$处可导，称$$x_0$$为f(x)的可导点，极限值称为函数f(x)在点$$x_0$$处的导数,记作$$f'(x_0)$$,也可记为.      导函数简称导数  如果函数f(x)在区间I内每个点处都可导，那么对于区间I内的每一个确定的x值，都有唯一的导数值$$f'(x)$$ 与之对应，这样就确定了定义在区间I上的一个函数(可导必定连续，连续未必可导)。
    求导方法  求增量Δy  算比值Δy/Δx   取极限$$f'(x)=lim(Δx→0){Δy/Δx}$$  x想对于Δx作为常量处理，只要将$$x_0$$ 带入f'(x)即可。
    导数的几何意义
      切线
      法线(与切线垂直)
    导数的计算
      基本函数的求导公式
        @ 1. $(C)'=0(C为常数)$
        @ 2. $(x^a)'=ax^{a-1}$(a为非零常数,x>0); $\left(\sqrt{X}\right)'= \frac{1}{2\sqrt{X}}; \left(\frac{1}{x}\right)'=\frac{1}{{ x^{2}}}$
        @ 3. $(a^x)'=a^{x}\ln a(a>0,a \neq 1)$,特别的,$(e^x)'=e^x$
        @ 4. $(log_{a}x)'=\frac{1}{x\ln a}(a>0,a \neq 1)$,特别的,$(\ln x)'=\frac{1}{x}$
        @ 5. $(\sin x)'=\cos x$
        @ 6. $(\cos x)'=-\sin x$
        @ 7. $(\tan x)'=\sec^{2}x$
        @ 8. $(\cot x)'=-\csc^{2}x$
        @ 9. $(\sec x)'=-\sec x\tan x$
        @ 10. $(\csc x)'=-\csc x\cot x$
        @ 11. $(\arcsin x)'=- \frac{1}{\sqrt{1-x^{2}}}$
        @ 12. $(\arccos x)'=- \frac{1}{\sqrt{1-x^{2}}}$
        @ 13. $(\arctan x)'= \frac{1}{1+x^{2}}$
        @ 14. $(arccot x)'= - \frac{1}{1+x^{2}}$
      导数的四则运算
    多元函数的偏导数
    隐函数的求导方法
    高阶导数
    函数的单调性
    一元函数的极值与最值
    多元函数的极值与最值
    条件极值
      @ 对于函数$f(x,y)$除了限制自变量$x,y$在其定义域内变化之外，再无其它任何限制，称之外无极值条件。
      @ 自变量需要满足一定约束条件(附加条件)的极值问题，称为条件极值。如y=f(x,y,z),当z为可知的值时，即可转为无极值条件问题。
      拉格朗日乘数法  直接求条件极值
        @设条件极值的目标函数为$f(x,y)$，约束条件为$\varphi (x,y)=0$,拉格朗日乘数法的具体步骤如下：
        @ 首先构造一个辅助函数$F(x,y,\lambda)=f(x,y)+\lambda\varphi(x,y)$，称为拉格朗日函数，其中称为拉格朗日乘数。
        @ 其次，解方程组
        @ $f(n)=\begin{cases} F'_{x}=f'_{x}(x,y)+\lambda\varphi'_{x}(x,y)=0,\\ F'_{x}=f'_{x}(x,y)+\lambda\varphi'_{x}(x,y)=0,\\ F'_{\lambda}=\varphi(x,y)=0, \end{cases}$
        @ 可得$F(x,y,\lambda)$的驻点$(x_0,y_0,\lambda_0)$,则$(x_0,y_0)$就是$z=f(x,y)$在约束条件$\varphi(x,y)=0$的情况下的可能的极值点，至于$(x_0,y_0)$是否确为$z=f(x,y)$的极值点，在实际问题中往往可由其实际定义加以判断。
    曲线的凹凸性与拐点
      凹凸性
      拐点
      渐进线
    曲率
      曲率的概念和公式  称$K=\underset{\Delta x\rightarrow0}{\lim}\mid\frac{\Delta\alpha}{\Delta s}\mid$为曲线在点$P$处的去率。  曲率是曲线弯曲程度的定量描述，曲率大，曲线的弯曲程度大；去率小曲线的，弯曲程度小。  曲率的计算公式为$$K=\underset{\Delta x\rightarrow0}{\lim}\mid\frac{\Delta\alpha}{\Delta s}\mid=\left|\frac{d\alpha}{ds}\right|=\left|\frac{y''}{(1+y'^{2})^{\frac{3}{2}}}\right|$$
      曲率圆与曲率半径
    洛必达法则
      @ 洛必达法则  设函数f(x),g(x)满足下列条件
      @ 1. $limf(x)=0,limg(x)=0$(或$limf(x)=∞，limf(g)=∞$);
      @ 2. $f(x),g(x)$ 可导，且$g'(x)≠0$；
      @ 3. $lim{f'(x)/g'(x)}$存在或为$∞$。
      @ 4. 则$lim{f(x)/g(x)}=lim{f'(x)/g'(x)}$
      @ 该定理说明对于${0/0}$型(或${∞/∞}$型)的未定型极限，在符合定理的条件下，可以通过对分子及分母分别求导数，然后再求极限的方法来确定。
      @ 注意
      @ 1. 使用洛必达法则前必须检验极限类型，只有$\frac{0}{0}$型或者$\frac{\infty}{\infty}$才可以使用洛必达法则。
      @ 2. 在极限计算过程中，无穷小量等价代换和洛必达法则应结合使用，能用等价代换则先用等价代换，这样可以简化计算过程。
      @ 3.
    微分
      @ 若函数y=f(x)在点x处可导，对于自变量的增量Δx，称f'(x)Δx为函数y=f(x)在点x处的微分，记为dy或df(x),即$$dy=f'(x)Δx$$.
      微分的几何意义
        @ 函数$y=f(x)$在点$x_0$处的微分$dy$在几何意义上表示曲线$y=f(x)$ 在点$M_0$处切线的纵坐标的改变量。
        @ 当$\mid\Delta x\mid$ 很小时，也就是说，在点$M_0$的附近，可以用切线的纵坐标的增量$dy$来近似替代曲线纵坐标的改变量$\Delta y$,即$ \Delta y ≈ dy$.
      微分与导数的区别  导数是函数在一点处的变化率，代表曲线上相应点处切线的斜率，而微分是函数在一点处由自变量的增量引起的函数值变化量的主要部分。
      运算法则
    全微分
      二元函数全微分的概念
    微分中值定理简介
      罗尔定理
        @ 设函数$f(x)$在闭区间$[a,b]$上连续，在开区间$(a,b)$内可导，且$f(a)=f(b)$,则至少存在一点$\xi\in(a,b)$,使得$f'(\xi)=0$.
        @   罗尔定理的几何意义是非常明显的：光滑连续曲线$y=f(x),x \in [a,b]$,其两端点的纵坐标相等，则曲线$y=f(x)$在区间$(a,b)$内至少有一点$\xi$,使曲线在$(\xi,f(\xi))$处的切线平行于x轴。
        @   罗尔定理并没有指明$\xi$的具体值，只说明了$\xi$的存在性,位于开区间$(a,b)$之中,$\xi$可以不唯一。
        @ 罗尔定理中的条件$f(a)=f(b)$不易被满足，去掉这个条件，可得到应用范围更广的拉格朗日中值定理
      拉格朗日中值定理
        @ 设函数$f(x)$在闭区间$[a,b]$上连续，在开区间$(a,b)$内可导，则至少存在一点$\xi \in (a,b) $,使得$f'(\xi)=\frac{f(b)-f(a)}{b-a}$
        @ 即如果曲线$y=f(x)$满足拉格朗日中值定理，则曲线上必定存在一点的切线，与通过点$(a,f(a))$和点$(b,f(b))的直线的斜率相等。
#        机器学习Support Vector Machines(svm)
        推理1  如果函数$f(x)$在区间$I$内的导数恒为0,那么函数$f(x)$在该区间内恒为常数
        推理2  如果函数$f(x)$和$g(x)$在区间I内每一点的导数都相等,那么这两个函数在区间$I$上至多相差一个常数$C$，即$f(x)=g(x)+C,x \in 1$ .
      柯西中值定理
  积分
    不定积分
      原函数  设$f(x)$是定义在某区间$I$上的已知函数，若存在函数$F(x),使得$F'(x)=f(x)$或$dF(x)=f(x)dx),则称$F(x)$是$f(x)$在区间$I$上的一个原函数.  如果一个函数有原函数，则原函数不是唯一的，而是有无穷多个。  一般地，连续函数一定有原函数。  如果函数$f(x)$在区间$I$上存在原函数$F(x)$，则$f(x)$在区间$I$上有无穷多个原函数，而$F(x)+C$表示$f(x)$所有原函数的全体，其中$C$为任意常数。
      不定积分的定义
      @ 如果$F(x)$是$f(x)$在区间$I$上的一个原函数，那么$f(x)$的所有原函数的全体$F(x)+C(C是任意常数)$称为$f(x)$在区间$I$上的不定积分，记为$\int f(x)dx$,即$$\int f(x)dx=F(x)+C$$,其中，$"\int"$为不定积分符号，$f(x)$称为被积函数，$f(x)dx$称为被积表达式，$x$称为积分变量，$C$称为积分常数。 
      @ 不定积分$\int f(x)dx$ 实际上是求被积函数$f(x)$的所有原函数的全体，也即只要求出$f(x)$的一个原函数再加上积分常数$C$即可。
      不定积分的几何意义
      不定积分的计算
        基本积分公式
        不定积分的性质
        不定积分的直接积分法
        换元积分法
        凑微分法
        分部积分法
    定积分
      @ 设函数$y=f(x)$在区间$[a,b]$上有定义,任取一分组点$a=x_{0}<x_{1}<\cdots<x_{i-1}<x_{i}<\cdots<x_{n-1}<x_{n}=b$,将区见$[a,b]$ 分成 $n$个小区间,即$[a,b]=\stackrel[i=1]{n}{U}[x_{i-1},x_{i}]$.记$\Delta x_{i}=x_{i}-x_{i-1}(i=1,2,\cdots,n)$,$\lambda=\underset{1≤ i≤ n}{max}\{\Delta x_{i}\}$. 在每个小区间$[x_{i-1},x_{i}]$上任意取一点$\xi_{i}(i=1,2,\cdots,n)$,作和式$\stackrel[i=1]{n}{\sum}f(\xi_{i})\Delta x$.如果不论对区间$[a,b]$采取何种分割方法及$\xi$如何选取,当$\lambda\rightarrow0$时,该和式的极限存在,则称此极限值为函数$f(x)$在区间$[a,b]$上的定积分,记为$\intop_{a}^{b}f(x)dx$,即$$\intop_{a}^{b}f(x)dx=\underset{\lambda\rightarrow0}{lim}\stackrel[i=1]{n}{\sum}f(\xi_{i})\Delta x_{i}$$,其中$f(x)$称为被积函数,$f(x)dx$称为被积表达式,$x$称为积分变量,$a$与$b$分别称为积分上限和积分下限,$\left[a,b\right]$称为积分区间 .
      @ 如果定积分$\intop_{a}^{b}f(x)dx$存在,则称$f(x)在\left[a,b\right]$上可积.连续函数是可积的 .
      @ 由定积分的定义,面积问题可以表述如下:由曲线$y=f(x)(f(x)≥)$,直线$x=a$,$x=b$和$x$轴围成的多边形的面积$S=\int_{a}^{b}f(x)dx$ .
      @ 所以,$\intop_{a}^{b}f(x)dx=-\intop_{b}^{a}f(x)dx$,特别地,当$a=b$时,$\intop_{a}^{b}f(x)dx=0$
      定积分的性质
        线性性质  $$\intop_{a}^{b}\left[f(x)\pm g(x)dx\right]=\intop_{a}^{b}f(x)dx\pm\intop_{a}^{b}g(x)dx$$
        区间可加性  若将区间$[a,b]$分为$[a,c]$和$[c,b]$两部分,则$$\intop_{a}^{b}f(x)dx=\intop_{a}^{c}f(x)dx+\intop_{c}^{b}f(x)dx$$
        不等式性质
        估值定理
        积分中值定理
          @ ![测试图片](https://raw.githubusercontent.com/ZTFtrue/Math-study/master/img/Screenshot-20190630150906-928x994.png)
      定积分的计算
        牛顿-莱布尼茨公式
          变上限积分
          牛顿-莱布尼茨公式(N-L)
            @ 设函数f(x)在闭区间$[a,b]$上连续,$F(x)$为$f(x)$的任一原函数,则有
            @ $$\intop_{a}^{b}f(x)dx=F(b)-F(a)$$
            @ 为计算方便$N-L$公式常用以下公式$$\intop_{a}^{b}f(x)dx=F(x)|_{a}^{b}=F(b)-F(a)$$

        定积分的换元积分法与分部积分法
    无穷区间上的广义积分
    二重积分
    常微分方程
    积分的应用
      平面图形的面积
      平面曲线的弧长
      旋转体的体积
      函数的平均值
      曲面的面积
  微分和导数,不定积分和定定积分的区别
      @ 导数是函数在一点处的变化率，代表曲线上相应点处切线的斜率
      @ 微分是函数在一点处由自变量的增量引起的函数值变化量的主要部分。
      @ 不定积分是函数(函数簇),不定积分是求被积函数$f(x)$的所有原函数的全体，即不定积分$F(x)$是$f(x)$的一个原函数再加上积分常数$C$。
      @ 定积分是一个确定的实数(所以有"定"字😁️),定积分的大小由积分区间和被积函数共同确定.
  无穷级数
  向量
    平面向量
    空间向量
  极坐标系
  整数整除
  同余与同余方程
    同余
    @ 数学上，同余（英语：congruence modulo，符号：≡）是数论中的一种等价关系。当两个整数除以同一个正整数，若得相同余数，则二整数同余。同余是抽象代数中的同余关系的原型。最先引用同余的概念与“≡”符号者为德国数学家高斯。
    @ 两个整数a，b，若它们除以正整数 m 所得的余数相等，则称a，b对于模 m 同余
    @ 记作${ a\equiv b{\pmod {m}}}$
    @ 读作a同余于b模m，或读作a与b关于模m同余。
    @ 比如${ 26\equiv 14{\pmod {12}}}$。
    @ 同余于的符号是同余相等符号≡。
      同余类
      @ 如同任何同余关系，对于模n同余是一种等价关系，整数$a$的等价类是一个集合$\left\{\ldots ,a-2n,a-n,a,a+n,a+2n,\ldots \right\}$，标记为${\overline {a}}_{n}$。由对于模n同余的所有整数组成的这个集合称为同余类$[a]$。
      @ 同余类中的每个元素都可以拿来代表该同余类，称为该同余类的代表数（representative）
      余数系统
      @ 余数系统（residue system）亦即模n同余类的代表数的集合，通常使用的代表数是最小非负整数，因为它是除法中的应当余数。要注意的是，对于同一个模数n，不同的_同余类_不等价，亦即，属于不同同余类的整数不同余于模数n，或者说，模n余数系统中的任二元素不同余于模n；而且，整数域中的_每个整数_只属于_模数n_的一个同余类，因为模n将整数域划分为互斥区块，每个区块是一个同余类。
      @ 一个完整余数系统（complete residue system）指的是模n的全部同余类的代表数的集合；因为余数系统中的任二元素不同余于模n，所以它也称为非同余余数的完整系统（英语：complete system of incongruent residues）。例如，模3有三个同余类$[0],[1],[2]$，其完整余数系统可以是${9,12+1,15+2}$。如果该集合是由每个同余类的最小非负整数所组成，亦即${0,1,2,...,n-1}$，则称该集合为模n的最小余数系统（least residue system）。
      @ 模n完整余数系统中，与模n互质的代表数所构成的集合，称为模n的简约余数系统（reduced residue system），其元素个数记为$\phi (n)$，亦即欧拉函数。例如，模$6$的简约余数系统为${1,5}(1,5 与6 互为质数)$或${7,11}$。如果模n是质数，那么它的最小简约余数系统是{1,2,...,n-1}$，只比最小余数系统少一个0。
    时间计算
    计算机反码
    HASH 取模算法
    @ hash(对象) % N，结果必定小于N。
    @ 如果我们有5个位置放这些对象，给每个位置编号0、1、2、3、4。使用HASH对象后的结果对5求余，那么余数一定是0、1、2、3、4，如果求余的结果为0， 我们就把当前对象放在在0号位置；如果余数为1，则放在1号位置；以此类推，能够直接判断出对象为于个位置上
      一致性HASH
    模运算
    @ 参考自 应用密码学 协议算法与C源程序
    @ 如果$a=b+kn$对某些整数$k$ 成立，那么$a\equiv b(mod n)$. 如果$a$为正,则b为$0~n$,那么你可以将b看作a被n整除以后的余数. 有时a叫做与 b 模 n 同余(congrunet)(三元等号$\equiv$ 表示同余).
    @ 从$0~n$的整数组成的集合构成了模$n$的完全剩余集. 这意味着,对于每一个整数a,它的模n的余项是从$0~n-1$的某个数.
    @ a模n的运算给出了a的余数,余数是从$0~n-1$ 的某个整数,这种运算称为模变换(modular reduction). 例如,$5 mod 3 = 2$.
    @ (应用密码学 协议算法与C源程序 P171)  这里模的定义与一些编程语言中的模定义或许有些不同. 例如,PASCAL的模操作符有时返回一个负数. 它返回一个从$-(n-1)~n-1$的数.在C语言中,$%$操作符返回第一个表示项被第二个表示项相除所得的余数,如果其中一个操作项是负的,那么结果就为负. 对于本书的所有算法,如果它返回一个负数,你应该将n加到这个模运算操作的结果上.
      模运算的四则运算
      @ $$ (a+b) mod n= ((a mod n)+(b mod n)) mod n $$ 
      @ $$ (a-b) mod n= ((a mod n)-(b mod n)) mod n $$ 
      @ $$ (a\timesb) mod n= ((a mod n)\times(b mod n)) mod n $$ 
      @ $$ (a \times (b+c)) mod n= (((a \times b) mod n)+((a \times c) mod n)) mod n $$ 
    求模逆元
    向上取整
  树和图(计算机)
    树
      @ 树可以分为几个层次，根节点是第0层，它的子节点是第1层，子节点的子节点是第2层，以此类推。树中任何一层的节点可以都看做是子树的根，该子树包含根节点的子节点，子节点的子节点等。我们定义树的层数就是树的深度。其中，每个节点都有一个与之相关的值，该值有时被称为键。
      @ 沿着一组特定的边，可以从一个节点走到另外一个与它不直接相连的节点。从一个节点到另一个节点的这一组边称为路径，在图中用虚线表示。以某种特定顺序访问树中所有的节点称为树的遍历。
      @ 在计算机科学里，自上而下的树则是个由来已久的习惯。
      二叉树
        @ 二叉树是一种特殊的树，它的子节点个数不超过两个。二叉树具有一些特殊的计算性质，使得在它们之上的一些操作异常高效。
        @ ```java
        @ // 定义一个节点java代码
        @ class Node{
        @   public int value;
        @   public Node left;
        @   public Node right;
        @   public Node(int v){
        @       this.value=v;
        @       this.left=null;
        @       this.right=null;
        @   }
        @ }
        @ ```
        二叉树的遍历
        @ 参考地址 https://www.geeksforgeeks.org/bfs-vs-dfs-binary-tree/
          广度优先遍历(BFS,Breadth First Traversal)
            @ 一层一层的遍历
          深度遍历（DFS)
            先序遍历
            中序遍历
            后序遍历
    图
    @ 图由边的集合及顶点的集合组成。顶点也有权重,也称为成本。如果一个图的顶点对是有序的,则可以称之为有向图。在对有向图中的顶点对排序后,便可以在两个顶点之间绘制一个箭头。有向图表明了顶点的流向。计算机程序中用来表明计算方向的流程图就是一个有向图的例子。
      无向图：即图的边没有方向，边一般用弧形括号表示()
      有向图：图的边有方向，边一般用尖括号表示<>
      完全图：图的每两个顶点之间有边链接
      连通图：图的每两个顶点之间有路径链接
  二面角
  算法初步
    辗转相除法
    更相减损术
    秦九韶算法
    排序
    进位制
    常见进制换算
      二进制 转 十进制
      @ 二进制数从低位到高位（即从右往左）计算，每一位以2为底，以位数为指数的幂乘以所在位数的值，然后相加。例如：
      @ (101011)B 转十进制
      @1. 第0位 1 x 2^0 = 1；
      @2. 第1位 1 x 2^1 = 2；
      @3. 第2位 0 x 2^2 = 0；
      @4. 第3位 1 x 2^3 = 8；
      @5. 第4位 0 x 2^4 = 0；
      @6. 第5位 1 x 2^5 = 32；
      @7. 1+2+0+8+0+32=43，即(101011)B=(43)D。
      八进制 转 十进制
      @ 基本原理同二进制转十进制，从低位到高位（即从右往左）计算，每一位以8为底，以位数为指数的幂乘以所在位数的值，然后相加。
      @将八进制的(53)O转换为十进制的步骤如下：
      @1. 第0位 3 x 8^0 = 3；
      @2. 第1位 5 x 8^1 = 40；
      @3. 3+40=43，即(53)O=(43)D。
      十六进制 转 十进制
      @ 基本原理依然同二进制转十进制，只是需要注意相应的ABCDEF与十进制对应于10、11、....、15 .
    散列碰撞处理
      @ 参考自数据结构与算法
      @ 散列是一种常用的数据存储技术，散列后的数据可以快速地插入或取用。散列使用的数据结构叫做散列表。在散列表上插入、删除和取用数据都非常快，但是对于查找操作来说却效率低下，比如查找一组数据中的最大值和最小值。
      @ 我们的散列表是基于数组进行设计的。数组的长度是预先设定的，如有需要，可以随时增加。所有元素根据和该元素对应的键，保存在数组的特定位置，该键和我们前面讲到的字典中的键是类似的概念。使用散列表存储数据时，通过一个散列函数将键映射为一个数字，这个数字的范围是0到散列表的长度。
      @ 理想情况下，散列函数会将每个键值映射为一个唯一的数组索引。然而，键的数量是无限的，数组的长度是有限的（理论上，在JavaScript中是这样），一个更现实的目标是让散列函数尽量将键均匀地映射到数组中。
      @ 即使使用一个高效的散列函数，仍然存在将两个键映射成同一个值的可能，这种现象称为碰撞（collision），当碰撞发生时，我们需要有方案去解决。本章稍后部分将详细讨论如何解决碰撞。
      霍纳算法
        @ 字符串中各字符的ASCII码值,求和时每次要乘以一个质数,
        @ ```
        @ function betterHash(string, arr) {
        @   const H = 37;// 必须是质数
        @   var total = 0;
        @   for (var i = 0; i < string.length; ++i) {
        @       total += H * total + string.charCodeAt(i);
        @   }
        @   total = total % arr.length;
        @   return parseInt(total);
        @ }
        @ ```
      开链法
        @ 当碰撞发生时，我们仍然希望将键存储到通过散列算法产生的索引位置上，但实际上，不可能将多份数据存储到一个数组单元中。开链法是指实现散列表的底层数组中，每个数组元素又是一个新的数据结构，比如另一个数组，这样就能存储多个键了。使用这种技术，即使两个键散列后的值相同，依然被保存在同样的位置，只不过它们在第二个数组中的位置不一样罢了。
        @ 实现开链法的方法是：在创建存储散列过的键值的数组时，通过调用一个函数创建一个新的空数组，然后将该数组赋给散列表里的每个数组元素，这样就创建了一个二维数组。
      线性探测法
        @ 线性探测法隶属于一种更一般化的散列技术：开放寻址散列。当发生碰撞时，线性探测法检查散列表中的下一个位置是否为空。如果为空，就将数据存入该位置；如果不为空，则继续检查下一个位置，直到找到一个空的位置为止。该技术是基于这样一个事实：每个散列表都会有很多空的单元格，可以使用它们来存储数据。
      选择那种方法
        @当存储数据使用的数组特别大时，选择线性探测法要比开链法好。这里有一个公式，常常可以帮助我们选择使用哪种碰撞解决办法：如果数组的大小是待存储数据个数的1.5倍，那么使用开链法；如果数组的大小是待存储数据的两倍及两倍以上时，那么使用线性探测法。
    二分法查找
      二分法插入排序(二分排序)
        在插入第i个元素时，对前面的0～i-1元素进行折半，先跟他们中间的那个元素比，如果小，则对前半再进行折半，否则对后半进行折半，直到left<right，然后再把第i个元素前1位与目标位置之间的所有元素后移，再把第i个元素放在目标位置上。
  统计简介
    抽样方法
    总体分布的估计
    正态分布
    回归分析
      线性回归（svm机器学习）
    独立性检验
    优选法
    单峰函数
    黄金分割法
    分数发
    多因素法
    计验设计初步

  概率简介
    传统古典型概率
    随机变量
    离散型随机变量
      分布列
      期望与方差
    排列组合
      二项式定理
    计数原理

  不等式
    一次不等式
  数学归纳与法合情推理
  线性代数
    行列式
    矩阵
  最优化
  随机过程
  其它
    牛顿迭代法
      @ 一般情况二分法求平方根，牛顿迭代法快速寻找平方根比二分法更快。首先随便猜一个近似值x，然后不断令x等于x和a/x的平均数，迭代次数越多越精确。
      @ 这种算法是不断用$(x,f(x))$的切线来逼近方程$x^2-a=0$的根。根号a实际上就是x^2-a=0的一个正实根，这个函数的导数是2x。也就是说，函数上任一点(x,f(x))处的切线斜率是2x。那么，x-f(x)/(2x)就是一个比x更接近的近似值。代入 f(x)=x^2-a得到x-(x^2-a)/(2x)，也就是(x+a/x)/2。 
      @ 下面是示例代码(非常厉害)[参考1](http://www.matrix67.com/data/InvSqrt.pdf)[参考2](https://zh.wikipedia.org/wiki/%E5%B9%B3%E6%96%B9%E6%A0%B9%E5%80%92%E6%95%B0%E9%80%9F%E7%AE%97%E6%B3%95)
      @```c
      @ float Q_rsqrt( float number )
      @  {
      @      long i;
      @      float x2, y;
      @      const float threehalfs = 1.5F;
      @  
      @      x2 = number * 0.5F;
      @      y   = number;
      @      i   = * ( long * ) &y;   // evil floating point bit level hacking
      @      i   = 0x5f3759df - ( i >> 1 ); // what the fuck?
      @      y   = * ( float * ) &i;
      @      y   = y * ( threehalfs - ( x2 * y * y ) ); // 1st iteration
      @      // y   = y * ( threehalfs - ( x2 * y * y ) ); // 2nd iteration, this  can be removed
      @  
      @      #ifndef Q3_VM
      @      #ifdef __linux__
      @           assert( !isnan(y) ); // bk010122 - FPE?
      @      #endif
      @      #endif
      @      return y;
      @  }  
      @```
    双峰函数
    二项式系数
  趣味数学
    小数0.9(其中9无限循环)等于1
    @ 证明:
    @ $0.\dot{9}=3\times 0.\dot{3}=3\times\frac{1}{3}=1$
    画线乘法计算法